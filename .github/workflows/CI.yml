name: CI
env:
  DEBUG: napi:*
  APP_NAME: hashtree
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  INPUT_RUN: 1024
permissions:
  contents: write
  id-token: write
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build-with-docker:
    name: node@v${{ matrix.node-version }} on ${{ matrix.settings.name }} archtitecture
    runs-on: ${{ matrix.settings.runner }}
    strategy:
      fail-fast: false
      matrix:
        node-version:
          # - 18
          # - 19
          - 20
          # - 21
          # - 22
        settings:
          - name: Linux GNU arm64
            runner: ubuntu-latest
            architecture: arm64
            target: aarch64-unknown-linux-gnu
            docker_image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            make_command: CC=gcc make
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.host }}-cargo-${{ matrix.settings.target }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.settings.architecture }}
      - name: Build Binding, Run Tests and Copy Build Artifact to Host
        run: |
          docker buildx build \
            --load \
            --platform linux/arm64 \
            --build-arg NODE_VERSION=${{ matrix.node-version }} \
            --build-arg WORKSPACE_DIR=${{ github.workspace }} \
            -t hashtree-temp-${{ matrix.settings.architecture }}:${{ matrix.node-version }} \
            --progress=plain .
          docker create \
            --name temp-container \
            hashtree-temp-${{ matrix.settings.architecture }}:${{ matrix.node-version }}
          docker cp temp-container:/usr/src/hashtree-js/prebuild ./prebuild
      - name: Upload binding.node
        if: github.repository_owner == 'chainsafe' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: binding-${{ matrix.settings.architecture }}-${{ matrix.node-version }}
          path: prebuild/*.node
          if-no-files-found: error

  build:
    name: node@v${{ matrix.node-version }} on ${{ matrix.settings.arch }} archtitecture
    runs-on: ${{ matrix.settings.runner }}
    strategy:
      fail-fast: false
      matrix:
        node-version:
          # - 18
          # - 19
          - 20
          # - 21
          # - 22
        settings:
          # https://napi.rs/docs/cli/artifacts
          # https://github.com/actions/runner-images

          # OSX x86 is not supported by the assembly yet.  @potuz is aware
          # - arch: Mac x86
          #   runner: macos-13
          #   target: x86_64-apple-darwin
          #   make_command: make
          - arch: Mac arm64
            runner: macos-latest
            target: aarch64-apple-darwin
            make_command: make

          - arch: Linux GNU x86
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            make_command: make

          # Cross-compiling works but need to figure out musl env to run tests
          #
          # the index.js looks for musl env and selects correct binary
          # - arch: Linux MUSL x86
          #   runner: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   make_command: make
          # Node does not support aarch64-linux-musl
          # - arch: Linux MUSL arm64
          #   runner: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   requires_zig: true
          #   make_command: make

          # C lib builds but the rust wrapper does not link correctly. Working on PR
          # for prysmaticlabs/hashtree
          #
          - arch: Windows x86
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            make_command: CC=gcc make
          # - arch: Windows arm64
          #   runner: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   make_command: CC=gcc make
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.host }}-cargo-${{ matrix.settings.target }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install Dependencies
        shell: bash
        run: yarn
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.requires_zig }}
      - name: Sanity Check
        shell: bash
        working-directory: hashtree/src
        run: |
          ${{ matrix.settings.make_command }}
          ls -A -G -F
      - name: Build
        shell: bash
        run: yarn build --target ${{ matrix.settings.target }}
      - name: Test
        run: yarn test
      - name: Upload binding.node
        if: github.repository_owner == 'chainsafe' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: binding-${{ matrix.settings.architecture }}-${{ matrix.node-version }}
          path: prebuild/*.node
          if-no-files-found: error

  # publish:
  #   name: Publish
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: yarn

  #     - name: Create tag
  #       id: tag
  #       uses: butlerlogic/action-autotag@1.1.2
  #       with:
  #         strategy: package
  #         tag_prefix: "v"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

  #     - name: Exit if no version change
  #       if: steps.tag.outputs.tagcreated == 'no'
  #       uses: actions/github-script@v3
  #       with:
  #         script: core.setFailed('The package.json version did not change. Workflow will not create a release.')

  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts

  #     - name: Install dependencies
  #       run: yarn install

  #     # Need to fix deploy to use the same method as blst-ts instead of the funky
  #     # system napi-rs uses. Copied the below from blst-ts and need to build 
  #     # process next

  #     # Moves all prebuilds to the `release` folder and then only moves the
  #     # prebuilds for the current node version into the `prebuild` folder for
  #     # publishing to npm.  Goal is to reduce bundle size and to also provide
  #     # faster install time for the most common version that Lodestar is supporting
  #     # - name: Prepare for Release and Publishing
  #     #   run: yarn ts-node scripts/makeRelease
      
  #     # - name: Create Github release with prebuilds
  #     #   if: steps.tag.outputs.tagcreated == 'yes'
  #     #   uses: softprops/action-gh-release@v2
  #     #   with:
  #     #     files: release/*
  #     #     tag_name: ${{ steps.tag.outputs.tagname }}
  #     #     fail_on_unmatched_files: true
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     # - name: Publish to NPM
  #     #   if: steps.tag.outputs.tagcreated == 'yes'
  #     #   run: yarn publish --access public
  #     #   env:
  #     #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  